#### Brute-force approch using Recursion

#include<iostream>

using namespace std;

int knapsack(int wt[],int val[],int n,int W)
{
    if(n==0 || W==0)
    {
        return 0;
    }
    if(wt[n-1]<=W)
    {
        return max(val[n-1]+knapsack(wt,val,n-1,W-wt[n-1]),knapsack(wt,val,n-1,W));

    }
    else{
        return knapsack(wt,val,n-1,W);
    }
}

int main()
{
    int val[]={4,7,2,6};
    int wt[]={1,8,3,4};
    int W=7;
    int n= 4;
    int ans= knapsack(wt,val,n,W);
    cout<<"Profit is: "<<ans<<endl;

    return 0;
}

Time Complexity: O(2<sup>n</sup>)
Auxiliary Space :O(1) + O(N)
