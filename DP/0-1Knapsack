#### Brute-force approch using Recursion

#include<iostream>

using namespace std;

int knapsack(int wt[],int val[],int n,int W)
{
    if(n==0 || W==0)
    {
        return 0;
    }
    if(wt[n-1]<=W)
    {
        return max(val[n-1]+knapsack(wt,val,n-1,W-wt[n-1]),knapsack(wt,val,n-1,W));

    }
    else{
        return knapsack(wt,val,n-1,W);
    }
}

int main()
{
    int val[]={4,7,2,6};
    int wt[]={1,8,3,4};
    int W=7;
    int n= 4;
    int ans= knapsack(wt,val,n,W);
    cout<<"Profit is: "<<ans<<endl;

    return 0;
}

Time Complexity: O(2<sup>n</sup>)
Auxiliary Space :O(1) + O(N)

### Recursion+Memorization(Top-Down Approach)

#include<iostream>
using namespace std;

int knapsack(int wt[],int val[],int n,int W, int **dp)
{
   
	if(dp[n][W]!=-1)
	{
		return dp[n][W];
	}
	if(n==0 || W==0)
    {
        dp[n][W]=0;
		return dp[n][W];
    }
    if(wt[n-1]<=W)
    {
        dp[n][W] = max(val[n-1]+knapsack(wt,val,n-1,W-wt[n-1],dp),knapsack(wt,val,n-1,W,dp));

    }
    else{
        dp[n][W]=knapsack(wt,val,n-1,W,dp);
    }
    
    
    return dp[n][W];
}

int main()
{
    int val[]={4,7,2,6};
    int wt[]={1,8,3,4};
    int W=7;
    int n= 4;
    
    int** dp;
    dp = new int*[n+1];
 
    for (int i = 0; i < n+1; i++)
        dp[i] = new int[W + 1];
        
    for(int i=0;i<n+1;i++)
    {
    	for(int j=0;j<W+1;j++)
    	{
    		dp[i][j] = -1;
		}
	}
    int ans= knapsack(wt,val,n,W,dp);
    cout<<"Profit is: "<<ans<<endl;

    return 0;
}

Complexity Analysis: 

Time Complexity: O(N*W). 
As redundant calculations of states are avoided.
Auxiliary Space: O(N*W) + O(N). 
The use of 2D array data structure for storing intermediate states and O(N) auxiliary stack space(ASS) has been used for recursion stack



### Iteration+Tabulation(Bottom-up-approach)

#include<iostream>
using namespace std;

int knapsack(int wt[],int val[],int n,int W)
{	
    int dp[n+1][W+1];
	for(int i=0;i<n+1;i++)
	{
		for(int j=0;j<W+1;j++)
		{
			if (i==0 || j==0)
			{
				dp[i][j]=0;
			}
			else if(wt[i-1]<=j)
			{
			    dp[i][j] = max(val[i-1]+dp[i-1][j-wt[i-1]],dp[i-1][j]);
			}
			else{
			    dp[i][j] = dp[i-1][j];
			}				
		}
    } 
	return dp[n][W];
}

int main()
{
    int val[]={4,7,2,6};
    int wt[]={1,8,3,4};
    int W=7;
    int n= 4;    
    int ans= knapsack(wt,val,n,W);
    cout<<"Profit is: "<<ans<<endl;
	return 0;
}

Time Complexity: O(N*W). 
Auxiliary Space: O(N*W). 
